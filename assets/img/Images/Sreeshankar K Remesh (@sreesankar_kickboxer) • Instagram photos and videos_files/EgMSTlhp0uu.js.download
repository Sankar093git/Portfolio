;/*FB_PKG_DELIM*/

__d("LSDecryptSupplementalKey",["LSArrayGetObjectAt","LSBase64Decode.nop","LSCreateDerivedKeys.nop","LSLogMebClientEvent.nop","LSSymmetricEncryptionCreateDecryptedData.nop"],(function(a,b,c,d,e,f){function a(){var a=arguments,c=a[a.length-1],d=[],e=[];return c.sequence([function(f){return c.sequence([function(e){return d[0]=c.i64.of_float(Date.now()),function(a){c.logger(a).info(a)}("[EncryptedBackups][decryptSupplementalKey] Beginning execution."),d[1]=c.i64.of_float(Date.now()),c.nativeOperation(b("LSBase64Decode.nop"),a[0]).then(function(a){return a=a,d[2]=a[0],a})},function(e){return c.nativeTypeOperation("Array",b("LSArrayGetObjectAt"),a[1],c.i64.cast([0,0])).then(function(a){return a=a,d[3]=a[0],d[4]=a[1],a})},function(a){return c.blobs.neq(d[2],void 0)?c.sequence([function(a){return d[13]=d[3].get("epoch_root_key"),d[3],d[14]=c.createArray(),d[21]=(d[14].push(c.i64.cast([0,32])),d[14]),c.nativeOperation(b("LSCreateDerivedKeys.nop"),c.blob("a2RmX2luZm86bWFpbGJveF9yb290X2tleV92Mj5zdXBwbGVtZW50YWxfZW5jX2tleQ=="),void 0,d[13],d[14]).then(function(a){return a=a,d[15]=a[0],a})},function(a){return d[15]!==void 0?c.sequence([function(a){return d[21]=c.i64.of_int32(d[15].length),c.i64.ge(d[21],c.i64.cast([0,1]))?c.sequence([function(a){return c.nativeTypeOperation("Array",b("LSArrayGetObjectAt"),d[15],c.i64.cast([0,0])).then(function(a){return a=a,d[23]=a[0],d[24]=a[1],a})},function(a){return d[22]=d[23]}]):c.sequence([function(a){return function(a){c.logger(a).mustfix(a)}("[EncryptedBackups][MEBCryptoUtils] CreateDerivedKeys returned an empty list of keys. This should never happen; aborting dasm VM."),d[23]=c.createArray(),void 0!==void 0?d[24]=(d[23].push(void 0),d[23]):0,c.nativeOperation(b("LSLogMebClientEvent.nop"),"MEBCryptoUtils","CreateDerivedKeys returned an empty list of keys. This should never happen; aborting dasm VM.",d[23],c.i64.cast([0,3]))},function(a){return d[22]=void 0}])},function(a){return d[16]=d[22]}]):c.sequence([function(a){return function(a){c.logger(a).mustfix(a)}("[EncryptedBackups][MEBCryptoUtils] CreateDerivedKeys returned null. This should never happen; aborting dasm VM."),d[21]=c.createArray(),void 0!==void 0?d[22]=(d[21].push(void 0),d[21]):0,c.nativeOperation(b("LSLogMebClientEvent.nop"),"MEBCryptoUtils","CreateDerivedKeys returned null. This should never happen; aborting dasm VM.",d[21],c.i64.cast([0,3]))},function(a){return d[16]=void 0}])},function(a){return c.blobs.neq(d[16],void 0)?d[17]=!0:d[17]=!1,d[17]?0:(function(a){c.logger(a).mustfix(a)}("LS::assert is failed. Attempting to coerce a null value to nonnull."),c["throw"]("LS::assert is failed. Attempting to coerce a null value to nonnull.")),c.nativeOperation(b("LSSymmetricEncryptionCreateDecryptedData.nop"),d[16],c.blob("c3VwcGxlbWVudGFsX2VuY19hYWQ="),d[2]).then(function(a){return a=a,d[18]=a[0],a})},function(a){return c.blobs.neq(d[18],void 0)?(a=[c.blobs.to_string(d[18]),void 0],d[19]=a[0],d[20]=a[1],a):(d[21]=new c.Map(),d[21].set("error_code",c.i64.cast([0,109])),d[21].set("stored_procedure","LSEncryptedBackupsDecryptSupplementalKeyStoredProcedure"),d[21].set("error_message",""),a=[void 0,d[21]],d[19]=a[0],d[20]=a[1],a),a=[d[19],d[20]],d[5]=a[0],d[6]=a[1],a}]):c.resolve((d[13]=new c.Map(),d[13].set("error_code",c.i64.cast([0,109])),d[13].set("stored_procedure","LSEncryptedBackupsDecryptSupplementalKeyStoredProcedure"),d[13].set("error_message",""),a=[void 0,d[13]],d[5]=a[0],d[6]=a[1],a))},function(a){return d[7]=c.i64.of_float(Date.now()),d[8]=c.i64.random(),d[10]="Finishing execution. Execution time: ",d[11]=c.i64.to_string(c.i64.sub(d[7],d[0])),d[12]=" ms",d[9]="",function(a){c.logger(a).info(a)}(["[EncryptedBackups][decryptSupplementalKey] ",d[9],d[10],d[9],d[11],d[9],d[12]].join("")),c.i64.eq(c.i64.mod_(d[8],c.i64.cast([0,1e3])),c.i64.cast([0,0]))?(d[13]=",",d[14]=c.createArray(),void 0!==void 0?d[15]=(d[14].push(void 0),d[14]):0,c.nativeOperation(b("LSLogMebClientEvent.nop"),"decryptSupplementalKey",[d[10],d[13],d[11],d[13],d[12]].join(""),d[14],c.i64.cast([0,4]))):c.resolve()},function(a){return a=[d[5],d[6]],e[0]=a[0],e[1]=a[1],a}])},function(a){return c.resolve(e)}])}a.__sproc_name__="LSEncryptedBackupsDecryptSupplementalKeyStoredProcedure";e.exports=a}),null);